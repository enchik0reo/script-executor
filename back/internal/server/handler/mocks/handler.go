// Code generated by MockGen. DO NOT EDIT.
// Source: routes.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/enchik0reo/commandApi/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockCommander is a mock of Commander interface.
type MockCommander struct {
	ctrl     *gomock.Controller
	recorder *MockCommanderMockRecorder
}

// MockCommanderMockRecorder is the mock recorder for MockCommander.
type MockCommanderMockRecorder struct {
	mock *MockCommander
}

// NewMockCommander creates a new mock instance.
func NewMockCommander(ctrl *gomock.Controller) *MockCommander {
	mock := &MockCommander{ctrl: ctrl}
	mock.recorder = &MockCommanderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommander) EXPECT() *MockCommanderMockRecorder {
	return m.recorder
}

// CreateNewCommand mocks base method.
func (m *MockCommander) CreateNewCommand(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewCommand", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewCommand indicates an expected call of CreateNewCommand.
func (mr *MockCommanderMockRecorder) CreateNewCommand(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewCommand", reflect.TypeOf((*MockCommander)(nil).CreateNewCommand), arg0, arg1)
}

// GetCommandList mocks base method.
func (m *MockCommander) GetCommandList(arg0 context.Context, arg1 int64) ([]models.Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommandList", arg0, arg1)
	ret0, _ := ret[0].([]models.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommandList indicates an expected call of GetCommandList.
func (mr *MockCommanderMockRecorder) GetCommandList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommandList", reflect.TypeOf((*MockCommander)(nil).GetCommandList), arg0, arg1)
}

// GetOneCommandDescription mocks base method.
func (m *MockCommander) GetOneCommandDescription(arg0 context.Context, arg1 int64) (*models.Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneCommandDescription", arg0, arg1)
	ret0, _ := ret[0].(*models.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneCommandDescription indicates an expected call of GetOneCommandDescription.
func (mr *MockCommanderMockRecorder) GetOneCommandDescription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneCommandDescription", reflect.TypeOf((*MockCommander)(nil).GetOneCommandDescription), arg0, arg1)
}

// StopCommand mocks base method.
func (m *MockCommander) StopCommand(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCommand", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopCommand indicates an expected call of StopCommand.
func (mr *MockCommanderMockRecorder) StopCommand(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCommand", reflect.TypeOf((*MockCommander)(nil).StopCommand), arg0, arg1)
}
