name: Pipeline

on:
  push:
    branches:
      - master

jobs:
  test:
    name: Run backend tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.21.4'

    - name: Run tests
      run: |
          cd ./back
          go clean -testcache
          go test ./internal/server/handler ./internal/services/commander

  check:
    name: Check changed files
    needs: test
    if: ${{ needs.test.result == 'success' }}
    outputs:
      executor: ${{ steps.check_files.outputs.executor }}
      frontend: ${{ steps.check_files.outputs.frontend }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: check modified files
        id: check_files
        run: |
            echo "=============== list modified files ==============="
            git diff --name-only HEAD^ HEAD

            echo "========== check paths of modified files =========="
            git diff --name-only HEAD^ HEAD > files.txt
            while IFS= read -r file; do
              echo $file
              if [[ $file == back/* ]]; then
                echo "::set-output name=executor::true"
              elif [[ $file == front/* ]]; then
                echo "::set-output name=frontend::true"
              else
                echo "file does not belong to any service"
              fi
            done < files.txt

  executor:
    name: Deploy Backend
    needs: check
    if: needs.check.outputs.executor == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Publish to Registry
      uses: docker/build-push-action@v2
      with:
        context: ./back
        push: true
        tags: enchik0reo/script_executor.backend:latest

    - name: Install ssh keys
      run: |
        install -m 600 -D /dev/null ~/.ssh/id_rsa
        echo -e "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} > ~/.ssh/known_hosts

    - name: Create docker compose config
      run: |
        cat ./back/docker-compose.yml | envsubst > docker-compose-secret-1.yml

    - name: Copy docker compose config
      run: scp docker-compose-secret-1.yml ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:docker-compose-back.yml

    - name: Down pull up
      run: ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "docker-compose -f docker-compose-back.yml down && docker-compose -f docker-compose-back.yml pull && docker-compose -f docker-compose-back.yml up -d && exit"
  
    - name: Cleanup config
      if: always()
      run: ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "rm docker-compose-back.yml"
  
    - name: Cleanup keys
      if: always()
      run: rm -rf ~/.ssh docker-compose-secret-1yml

  frontend:
    name: Deploy Frontend
    needs: check
    if: needs.check.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Publish to Registry
      uses: docker/build-push-action@v2
      with:
        context: ./front
        push: true
        tags: enchik0reo/script_executor.frontend:latest

    - name: Install ssh keys
      run: |
        install -m 600 -D /dev/null ~/.ssh/id_rsa
        echo -e "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} > ~/.ssh/known_hosts

    - name: Create docker compose config
      run: |
        cat ./front/docker-compose.yml | envsubst > docker-compose-secret-2.yml

    - name: Copy docker compose config
      run: scp docker-compose-secret-2.yml ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:docker-compose-front.yml

    - name: Down pull up
      run: ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "docker-compose -p react -f docker-compose-front.yml down && docker-compose -p react -f docker-compose-front.yml pull && docker-compose -p react -f docker-compose-front.yml up -d && exit"
  
    - name: Cleanup config
      if: always()
      run: ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "rm docker-compose-front.yml"
  
    - name: Cleanup keys
      if: always()
      run: rm -rf ~/.ssh docker-compose-secret-2.yml
